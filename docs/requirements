# Project overview
Use this document 
to build a web application
to DIO Product Development Team
to monitor the team's OKRs 
to allow users to access result metrics
from their smartphones 
or from the tv in their office room
and understand the initiatives the team is working at 
to achieve results

# Hosting
The application will be hosted on Firebase, providing:
- Secure and scalable hosting environment
- Fast content delivery through Firebase CDN
- Easy deployment process
- SSL certificate management

# Feature requirements
## Implemented Features
- Dark/Light mode toggle with system preference detection
- Responsive sidebar navigation with objective list
- Homepage containing an overview of objectives and key results with:
  - Objective ID and truncated title for better visual harmony
  - Counter showing number of KRs for each objective
  - Counter showing number of initiatives for each objective
  - Key Results list showing:
    - KR ID and title
    - Health indicator using color coding (red < 30%, yellow 30-70%, green > 70%)
  - Direct links to specific objective and KR pages
- Each objective has its own page including:
  - Objective ID and full title
  - Information icon with tooltip showing complete objective description
  - List of key results with:
    - KR ID and title
    - Progress indicator with color coding (red < 30%, yellow 30-70%, green > 70%, gray for disabled)
    - Due date
  - List of initiatives with:
    - Title
    - Description
    - Responsible person
    - Status with color coding (red, yellow, green)
    - Due date
- Each key result has its own page including:
  - KR ID and title
  - Detailed measurement information:
    - How the KR is measured/calculated
    - Data source information
    - Update frequency
  - Historical data graph showing the last 6 months of progress
  - List of related initiatives
- Data persistence through JSON files in the data folder for:
  - OKRs structure
  - Initiatives
  - Key Result history with month/year references
  - Key Result measurement details and explanations

## Pending Features
- Additional mobile optimizations
- TV display mode optimizations

# Technical requirements
## Implemented
- Vue.js 3 with Composition API
- Tailwind CSS for styling
- Vue Router for navigation
- Chart.js for data visualization
- Heroicons for icons

## Pending
- Integration with shadcn components
- Firebase setup and configuration:
  - Firebase Hosting setup
  - Deployment pipeline configuration
  - Domain and SSL certificate setup

# Code Structure
- `/frontend/src/components/` - Vue components
- `/frontend/src/data/` - JSON data files
- `/frontend/src/router/` - Route configurations
- `/docs/` - Project documentation
- `/firebase/` - Firebase configuration files